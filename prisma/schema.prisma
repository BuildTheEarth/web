generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String           @id @default(uuid())
  ssoId             String           @unique
  discordId         String?
  createdBuildTeams BuildTeam[]      @relation("creator")
  permissions       UserPermission[]
  joinedBuildTeams  BuildTeam[]      @relation("members")
  applications      Application[]    @relation("user")
  reviewed          Application[]    @relation("reviewer")
}

model BuildTeam {
  id                   String                @id @default(uuid())
  name                 String                @unique
  icon                 String
  backgroundImage      String
  invite               String
  about                String
  creatorId            String
  createdAt            DateTime              @default(now())
  location             String                @default("")
  slug                 String                @unique @default("")
  applicationQuestions ApplicationQuestion[] @relation("applicationQuestions")
  builds               Build[]               @relation("builds")
  creator              User                  @relation("creator", fields: [creatorId], references: [id])
  showcases            Showcase[]            @relation("showcases")
  socials              Social[]              @relation("socials")
  UserPermission       UserPermission[]
  members              User[]                @relation("members")
  Application          Application[]
}

model ApplicationQuestion {
  id                String                  @id @default(uuid())
  title             String
  subtitle          String
  placeholder       String                  @default("")
  required          Boolean                 @default(true)
  type              ApplicationQuestionType
  icon              String
  additionalData    Json                    @default("{}")
  buildTeamId       String
  sort              Int                     @unique
  buildTeam         BuildTeam               @relation("applicationQuestions", fields: [buildTeamId], references: [id])
  ApplicationAnswer ApplicationAnswer[]
}

model Social {
  id          String    @id @default(uuid())
  name        String
  icon        String
  url         String    @unique
  buildTeamId String
  buildTeam   BuildTeam @relation("socials", fields: [buildTeamId], references: [id])
}

model Build {
  id          String    @id @default(uuid())
  name        String
  createdAt   DateTime  @default(now())
  buildTeamId String
  buildTeam   BuildTeam @relation("builds", fields: [buildTeamId], references: [id])
}

model Showcase {
  id          String    @id @default(uuid())
  image       String
  title       String
  createdAt   DateTime  @default(now())
  buildTeamId String
  buildTeam   BuildTeam @relation("showcases", fields: [buildTeamId], references: [id])
}

model UserPermission {
  id          String     @id @default(uuid())
  userId      String
  buildTeamId String?
  permission  String
  buildTeam   BuildTeam? @relation(fields: [buildTeamId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
}

model FAQQuestion {
  id       String @id @default(uuid())
  question String
  answer   String
  links    Json[] @default([])
}

model Contact {
  id      String  @id @default(uuid())
  name    String
  role    String
  discord String?
  email   String?
  avatar  String?
}

model Newsletter {
  id             String   @id @default(uuid())
  issue          Int      @unique
  title          String
  public         Boolean?
  published_date DateTime
  links          String[]
}

model Application {
  id                String              @id @default(uuid())
  buildteamId       String
  buildteam         BuildTeam           @relation(fields: [buildteamId], references: [id])
  userId            String
  user              User                @relation("user", fields: [userId], references: [id])
  reviewerId        String?
  reviewer          User?               @relation("reviewer", fields: [reviewerId], references: [id])
  status            ApplicationStatus   @default(SEND)
  createdAt         DateTime            @default(now())
  reviewedAt        DateTime?
  reason            String?
  ApplicationAnswer ApplicationAnswer[]
}

model ApplicationAnswer {
  id            String              @id @default(uuid())
  applicationId String
  application   Application         @relation(fields: [applicationId], references: [id])
  questionId    String
  question      ApplicationQuestion @relation(fields: [questionId], references: [id])
  answer String
}

enum ApplicationStatus {
  SEND
  REVIEWING
  ACCEPTED
  DECLIEND
}

enum ApplicationQuestionType {
  TEXT
  SHORT_INPUT
  LONG_INPUT
  DROPDOWN
  CITY
  URL
  MINECRAFT
  SLIDER
  IMAGE
  CHECKBOX
}
